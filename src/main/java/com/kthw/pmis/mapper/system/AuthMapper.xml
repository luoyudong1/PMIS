<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"  
    "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.kthw.pmis.mapper.system.AuthMapper">

	<select id="getRoleByUser" parameterType="String" resultType="UserRole">
		SELECT UR.*, ROLE.ROLE_NAME AS role_name, ROLE.ROLE_CODE AS role_code,U.DEPOT_ID AS dept_id
		FROM TBL_USER_ROLES UR,TBL_ROLE ROLE,TBL_USER U
		WHERE UR.USER_ID = #{userId}
		AND ROLE.ROLE_ID = UR.ROLE_ID
		and U.USER_ID=UR.USER_ID
	</select>

	<!--  //根据user_roleId 获得Role信息                      -->
	<select id="getRoleByUserRole" parameterType="int" resultType="Role">
		SELECT *
		FROM TBL_ROLE
		WHERE ROLE_ID = #{userRole}
	</select>

	<select id="getFuncList" resultType="Function">
		<![CDATA[
			WITH RECURSIVE res AS (
			   SELECT t1.* FROM tbl_function as t1  
			   WHERE t1.enable < 1 
			   UNION 
			         SELECT t2.* from tbl_function as t2
			     INNER JOIN res as t3 ON t3.id = t2.parent_id
			     WHERE t2.enable < 1
			 )SELECT res.* from res
		]]>
	</select>

	<insert id="insertFunc" parameterType="Function">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
           select nextval('func_id_seq')
        </selectKey>
        INSERT INTO TBL_FUNCTION (ID, FUNC_NAME, FUNC_URL, PARENT_ID, FUNC_LEVEL, FUNC_DESC, SHOW_ORDER)
        VALUES (#{id}, #{func_name}, #{func_url}, #{parent_id, jdbcType=NUMERIC}, #{func_level}, #{func_desc}, #{show_order})
    </insert>

    <delete id="deleteAuthorityByFid" parameterType="int">
        <![CDATA[
            DELETE FROM TBL_PERMISSION WHERE FUNC_ID in (
	            WITH RECURSIVE res AS (
				   SELECT t1.id FROM tbl_function as t1  
				   WHERE t1.id = #{funcId}
				   UNION 
				         SELECT t2.id from tbl_function as t2
				     INNER JOIN res as t3 ON t3.id = t2.parent_id
				     WHERE t2.enable < 1
				 )SELECT res.* from res
	         )
        ]]>
    </delete>

    <update id="deleteFuncByFid" parameterType="int">
         <![CDATA[
		UPDATE TBL_FUNCTION  SET ENABLE = 1 WHERE id in (
			 WITH RECURSIVE res AS (
				   SELECT t1.id FROM tbl_function as t1  
				   WHERE t1.id = #{funcId}
				   UNION 
				         SELECT t2.id from tbl_function as t2
				     INNER JOIN res as t3 ON t3.id = t2.parent_id
				     WHERE t2.enable < 1
				 )SELECT res.* from res
		)
		 ]]>
    </update>

	<update id="updateFunc" parameterType="Function">
		UPDATE TBL_FUNCTION  SET FUNC_NAME = #{func_name}, FUNC_URL = #{func_url}, FUNC_DESC = #{func_desc}, SHOW_ORDER = #{show_order},parent_id=#{parent_id}
		WHERE ID = #{id}
	</update>

	<select id="queryFuncIdsByRole" parameterType="int" resultType="Integer">
        SELECT FUNC_ID
        FROM TBL_PERMISSION
        WHERE ROLE_ID = #{roleId}
    </select>

	<insert id="insertNewAuth" parameterType="Map">
		INSERT INTO TBL_PERMISSION (FUNC_ID, ROLE_ID)
		<foreach collection="newIds" item="id" separator="union all">
			SELECT  to_number(#{id}, '9999999'), to_number(#{roleId}, '9999999')
		</foreach>
	</insert>

	<delete id="deleteOldAuth" parameterType="Map">
		DELETE FROM TBL_PERMISSION WHERE ROLE_ID = to_number(#{roleId}, '999')
		AND FUNC_ID in
		<foreach collection="deleteIds" item="id" open="(" separator="," close=")">
			to_number(#{id}, '999')
		</foreach>
	</delete>

	<select id="checkRoleNameExists" parameterType="Role" resultType="boolean">
        SELECT count(*) FROM TBL_ROLE
        WHERE ROLE_NAME = #{role_name}
        <if test="role_id != null and role_id != 0">
            AND ROLE_ID != #{role_id}
        </if>
	</select>

	<insert id="insertRole" parameterType="Role">
		<selectKey keyProperty="role_id" resultType="int" order="BEFORE">
			select nextval('role_id_seq')
		</selectKey>
		INSERT INTO TBL_ROLE (ROLE_ID, ROLE_NAME)
		VALUES (#{role_id}, #{role_name})
	</insert>

	<update id="updateRole" parameterType="Role">
		UPDATE TBL_ROLE SET ROLE_NAME = #{role_name} WHERE ROLE_ID = #{role_id}
	</update>

    <delete id="deleteRole" parameterType="int">
        DELETE FROM TBL_ROLE
        WHERE ROLE_ID = #{roleId}
    </delete>

    <delete id="deletePermissionByRole" parameterType="int">
        DELETE FROM TBL_PERMISSION
        WHERE ROLE_ID = #{roleId}
    </delete>

    <delete id="deleteUserRole" parameterType="int">
        DELETE FROM TBL_USER_ROLES
        WHERE ROLE_ID = #{roleId}
    </delete>

	<insert id="addUserRole" parameterType="UserRole">
		insert into
		TBL_user_roles(user_id,role_id)
		values(#{user_id},#{role_id})
	</insert>

	<delete id="removeUserRole" parameterType="String">
		delete from TBL_user_roles where
		user_id=#{user_id}
	</delete>
	<select id="queryFuncPermByRole" parameterType="Map" resultType="Map">	
		select * from (SELECT
		f2.func_name AS parent_name,
		f2.func_url AS parent_url,
		f.func_level AS func_level,
		f.func_name AS func_name,
		f.func_url AS func_url,
		p.func_id AS func_id,
		p.perm_name as perm_name
	FROM
		tbl_permission AS p,
		tbl_function AS f,
		tbl_function AS f2 
	WHERE
		p.role_id = to_number(#{role_id}, '999') 
		AND p.func_id = f.id
		AND f.parent_id = f2.id) as func where func.func_level = 3
	</select>
	<update id="updatePermission" parameterType="Map">
		UPDATE TBL_permission SET perm_name = #{perm_name} WHERE func_id = to_number(#{func_id}, '999') and ROLE_ID = to_number(#{role_id}, '999') 
	</update>
	
</mapper>