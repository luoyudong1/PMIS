<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"  
    "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.kthw.pmis.mapper.system.UserMapper">

	<select id="getUserById" parameterType="String" resultType="User">
		SELECT * FROM TBL_USER WHERE USER_ID=#{user_id}
	</select>

	<select id="getAllUsersCount" resultType="int">
        <![CDATA[ 
            select count(*) from TBL_user where user_id != 'admin'
        ]]>
	</select>
	
	<select id="getUsersParamCount" parameterType="Map" resultType="int">
        <![CDATA[ 
            select count(*) from TBL_user where user_id != 'admin' and (user_name like #{user_name} or user_id like #{user_name})
        ]]>
	</select>	
	
	<select id="getAllUsers" parameterType="Map" resultType="User">
			SELECT u.*,depot_name,
<!-- 			workshop_name,team_name,  -->
			(SELECT string_agg(r.ROLE_NAME,',') AS roleNames 
				FROM TBL_USER_ROLES k, TBL_ROLE r 
				WHERE k.USER_ID = u.USER_ID AND k.ROLE_ID = r.ROLE_ID) AS user_role_name
			FROM TBL_USER u
<!-- 				    LEFT JOIN tbl_workshop_dict w on u.workshop_id=w.workshop_id -->
					LEFT JOIN tbl_depot_dict d on u.depot_id=d.depot_id
<!-- 					LEFT JOIN tbl_team_dict t on u.team_id=t.team_id -->
			WHERE u.USER_ID != 'admin'
			<if test='user_name != null and user_name != "" '>
           		and (u.user_name like #{user_name} or u.user_id like #{user_name})
       		</if>
				ORDER BY u.LAST_LOGIN DESC
				LIMIT ${length} OFFSET ${start}
	</select>
	
	<select id="getRolesList" resultType="Role">
		<![CDATA[ 
        SELECT role_id, role_name, role_code FROM TBL_role ORDER BY role_id ASC
        ]]>
	</select>

	<insert id="addUser" parameterType="User">
		insert into
		TBL_user(user_id,user_pass,user_name,user_role,enabled,reg_date,last_login,login_status,idx_url,depot_id,dispatcher)
		values(#{user_id},#{user_pass},#{user_name},${user_role},${enabled},#{reg_date},#{last_login},0,#{idx_url, jdbcType=VARCHAR},#{depot_id},#{dispatcher})
	</insert>

	<update id="updateUser" parameterType="User">
		update TBL_user set
		user_pass=#{user_pass},user_name=#{user_name},enabled=#{enabled},depot_id=#{depot_id}
		where user_id=#{user_id}
	</update>
	
	<delete id="removeUser" parameterType="String">
		delete from TBL_user where
		user_id=#{user_id}
	</delete>
	
	<update id="login" parameterType="UserLog">
		update
		TBL_user set
		last_login=#{login_date},
		login_ip = #{login_ip},
		login_status=1 
		where
		user_id=#{user_id}
	</update>
	
	<update id="logout" parameterType="String">
		update
		TBL_user set
		login_status=0
		where
		user_id=#{user_id}
	</update>

	<update id="updateUserUrl" parameterType="Map">
		update TBL_user set
		idx_url=#{idx_url} where user_id=#{user_id}
	</update>

    <select id="queryFuncByUser" parameterType="String" resultType="Function">
        SELECT DISTINCT (f.ID),f.FUNC_NAME, f.FUNC_URL, f.PARENT_ID, f.FUNC_LEVEL, f.FUNC_DESC, f.SHOW_ORDER, f.ENABLE
        FROM TBL_USER_ROLES r, TBL_PERMISSION p, TBL_FUNCTION f
        WHERE r.USER_ID = #{userId} AND r.ROLE_ID = p.ROLE_ID AND p.FUNC_ID = f.ID AND f.ENABLE != 1
        ORDER BY f.FUNC_LEVEL
    </select>

	<!-- //登录不同系统后,根据用户id和role 获得用户功能和权限   ZF.add         -->
	<select id="queryFuncByUserRole" parameterType="User" resultType="Function">
        SELECT DISTINCT (f.ID),f.FUNC_NAME, f.FUNC_URL, f.PARENT_ID, f.FUNC_LEVEL, f.FUNC_DESC, f.SHOW_ORDER, f.ENABLE
        FROM TBL_PERMISSION p, TBL_FUNCTION f
        WHERE p.ROLE_ID = #{user_role}  AND p.FUNC_ID = f.ID AND f.ENABLE != 1
        ORDER BY f.FUNC_LEVEL
    </select>
    
	<select id="queryAuthByUser" parameterType="String" resultType="Function">
        SELECT p.role_id,f.id,p.perm_name,f.FUNC_NAME,f.FUNC_URL,f.PARENT_ID,f.FUNC_LEVEL,f.FUNC_DESC,f.SHOW_ORDER,f.ENABLE 
		FROM TBL_USER_ROLES r,TBL_PERMISSION p,	TBL_FUNCTION f 	
		WHERE r.USER_ID = #{userId} AND r.ROLE_ID = p.ROLE_ID AND p.FUNC_ID = f.ID AND f.ENABLE != 1 and p.perm_name is not null
		ORDER BY f.FUNC_LEVEL
    </select>

	<insert id="addUserLog" parameterType="UserLog">
		insert into
		TBL_user_log(id,user_id,login_ip,login_date)
		values((select nextval('log_id_seq')),#{user_id},#{login_ip},#{login_date})
	</insert>
	
	<select id="getUserOneLog" parameterType="Map" resultType="ViewLogStat">
		SELECT * FROM view_log_stat 
			where user_id = #{user_id} 
			AND stat_date = #{stat_date}
	</select>
	
	<select id="getUserListLog" parameterType="Map" resultType="ViewLogStat">
		SELECT * FROM view_log_stat 
			where user_id = #{user_id} and stat_date &gt;= #{starttime}
			AND stat_date &lt;= #{endtime}  
			order by stat_date
	</select>
	
	<select id="getAllDepot" parameterType="Map" resultType="Depot">
		SELECT * FROM tbl_depot_dict 
		where enabled = 0
	</select>
	
	<select id="getAllWorkshop" parameterType="Map" resultType="Workshop">
		SELECT * FROM tbl_workshop_dict 
		where enabled != 0
		<if test='depot_id != null and depot_id != "" '>
        	and depot_id = ${depot_id}
       	</if>
	</select>
	
	<select id="getAllTeam" parameterType="Map" resultType="Team">
		SELECT * FROM tbl_team_dict
		where 1=1
		<if test='workshop_id != null and workshop_id != "" '>
        	and workshop_id = ${workshop_id}
       	</if>
	</select>

	<!--   登录不同系统后更行tbl_user 表中的角色编号和登录日期   ZF.add -->
	<update id="updateUser_Index" parameterType="User">
		update TBL_user set
		user_role=#{user_role},last_login=#{last_login}
		where user_id=#{user_id}
	</update>
	
</mapper>